// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  subscriptionStatus    String    @default("free")
  subscriptionStart     DateTime?
  subscriptionEnd       DateTime?
  wayforpayCustomerId   String?
  generationsUsed       Int       @default(0)
  generationsLimit      Int       @default(5)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  generations   Generation[]
  payments      Payment[]
  teamMembers   TeamMember[]
  ownedTeams    Team[]       @relation("TeamOwner")
  bulkJobs      BulkJob[]
  apiUsage      ApiUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Generation {
  id           String   @id @default(cuid())
  userId       String
  productName  String
  category     String
  writingStyle String
  language     String
  content      String   // JSON string
  teamId       String?
  apiKeyId     String?
  bulkJobId    String?
  createdAt    DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team?    @relation(fields: [teamId], references: [id])
  apiKey   ApiKey?  @relation(fields: [apiKeyId], references: [id])
  bulkJob  BulkJob? @relation(fields: [bulkJobId], references: [id])
}

model Payment {
  id               String   @id @default(cuid())
  userId           String
  amount           Int      // in kopecks
  currency         String   @default("UAH")
  status           String
  wayforpayOrderId String   @unique
  plan             String
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  ownerId     String
  plan        String   @default("business")
  settings    String?  // JSON string for team settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User           @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  apiKeys     ApiKey[]
  generations Generation[]
  bulkJobs    BulkJob[]
  invites     TeamInvite[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   // owner, admin, editor, viewer
  joinedAt  DateTime @default(now())

  team      Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamInvite {
  id        String   @id @default(cuid())
  teamId    String
  email     String
  role      String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  team      Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String   // JSON array of permissions
  usageCount  Int      @default(0)
  lastUsed    DateTime?
  isActive    Boolean  @default(true)
  teamId      String
  createdAt   DateTime @default(now())

  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  generations Generation[]
  usage       ApiUsage[]
}

model ApiUsage {
  id        String   @id @default(cuid())
  apiKeyId  String
  userId    String
  endpoint  String
  method    String
  status    Int
  timestamp DateTime @default(now())

  apiKey    ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BulkJob {
  id          String   @id @default(cuid())
  userId      String
  teamId      String
  name        String
  status      String   // pending, processing, completed, failed
  totalItems  Int
  processed   Int      @default(0)
  successful  Int      @default(0)
  failed      Int      @default(0)
  inputData   String   // JSON string
  results     String?  // JSON string
  errorLog    String?  // JSON string
  createdAt   DateTime @default(now())
  completedAt DateTime?

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  generations Generation[]
}